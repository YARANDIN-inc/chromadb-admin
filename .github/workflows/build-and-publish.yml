name: Build and Publish Release

on:
  push:
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker image
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Lint and test Helm chart
  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.1'

      - name: Add Bitnami repository
        run: helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: Update Helm dependencies
        run: |
          cd helm/chromadb-admin
          helm dependency update

      - name: Lint Helm chart
        run: |
          cd helm/chromadb-admin
          helm lint .

      - name: Template Helm chart
        run: |
          cd helm/chromadb-admin
          helm template test . --debug

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Package and publish Helm chart
  publish-helm:
    runs-on: ubuntu-latest
    needs: [build-image, helm-lint]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.1'

      - name: Add Bitnami repository
        run: helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: Update Helm dependencies
        run: |
          cd helm/chromadb-admin
          helm dependency update

      - name: Determine chart version
        id: chart-version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.1.0-${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Chart version: $VERSION"

      - name: Update chart version and appVersion
        run: |
          cd helm/chromadb-admin
          sed -i "s/version: .*/version: ${{ steps.chart-version.outputs.version }}/" Chart.yaml
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            sed -i "s/appVersion: .*/appVersion: \"${{ steps.chart-version.outputs.version }}\"/" Chart.yaml
          else
            sed -i "s/appVersion: .*/appVersion: \"${GITHUB_SHA::8}\"/" Chart.yaml
          fi

      - name: Package Helm chart
        run: |
          mkdir -p charts
          cd helm/chromadb-admin
          helm package . --destination ../../charts

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push chart to GHCR
        run: |
          cd charts
          for chart in *.tgz; do
            helm push "$chart" oci://ghcr.io/${{ github.repository_owner }}/charts
          done

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm repository index
        run: |
          # Create gh-pages directory if it doesn't exist
          mkdir -p gh-pages-repo
          
          # Copy new charts to gh-pages
          cp charts/*.tgz gh-pages-repo/ || true
          
          cd gh-pages-repo
          
          # Initialize gh-pages if empty
          if [ ! -f index.yaml ]; then
            git checkout --orphan gh-pages || git checkout gh-pages
            git rm -rf . || true
            echo "# ChromaDB Admin Helm Charts" > README.md
            git add README.md
            git commit -m "Initialize gh-pages" || true
            git push origin gh-pages || true
          fi
          
          # Generate/update Helm repository index
          helm repo index . --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          
          # Commit and push changes
          git add .
          git commit -m "Update Helm repository index" || exit 0
          git push origin gh-pages

      - name: Create GitHub Release (for tags)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: charts/*.tgz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [build-image, publish-helm]
    if: always()
    steps:
      - name: Notification
        run: |
          if [[ "${{ needs.build-image.result }}" == "success" && "${{ needs.publish-helm.result }}" == "success" ]]; then
            echo "✅ Build and publish completed successfully!"
          else
            echo "❌ Build or publish failed!"
            exit 1
          fi 